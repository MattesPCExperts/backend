generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  email         String          @unique
  passwordHash  String
  name          String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  vehicles      Vehicle[]
  posts         Post[]
  socialAccounts SocialAccount[]
  subscription  Subscription?
  refreshTokens RefreshToken[]
}

model Vehicle {
  id          String   @id @default(uuid())
  make        String
  model       String
  year        Int
  price       Decimal  @db.Decimal(12, 2)
  mileage     Int?
  vin         String?
  images      String[]
  features    String[]
  description String   @db.Text
  sourceUrl   String
  scrapedAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
  posts       Post[]

  @@unique([id, userId])
}

model Post {
  id             String   @id @default(uuid())
  content        String   @db.Text
  platform       String
  status         String
  scheduledFor   DateTime?
  publishedAt    DateTime?
  createdAt      DateTime @default(now())

  userId         String
  user           User     @relation(fields: [userId], references: [id])
  vehicleId      String
  vehicle        Vehicle  @relation(fields: [vehicleId], references: [id])

  platformPostId String?
  analytics      PostAnalytics?
}

model SocialAccount {
  id           String   @id @default(uuid())
  platform     String
  platformId   String
  accessToken  String   @db.Text
  refreshToken String?  @db.Text
  expiresAt    DateTime?
  accountName  String?
  isActive     Boolean  @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  userId       String
  user         User     @relation(fields: [userId], references: [id])

  @@unique([userId, platform, platformId])
}

model PostAnalytics {
  id          String @id @default(uuid())
  postId      String @unique
  post        Post   @relation(fields: [postId], references: [id])

  impressions Int    @default(0)
  likes       Int    @default(0)
  shares      Int    @default(0)
  comments    Int    @default(0)
  clicks      Int    @default(0)
}

model Subscription {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])

  tier      String
  status    String
  startDate DateTime @default(now())
  endDate   DateTime?
}

model RefreshToken {
  id         String   @id @default(uuid())
  tokenHash  String   @unique
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  expiresAt  DateTime
  revokedAt  DateTime?

  @@index([userId])
}

